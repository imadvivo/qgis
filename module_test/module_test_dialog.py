# -*- coding: utf-8 -*-
"""
/***************************************************************************
 exampleClassDialog
                                 A QGIS plugin
 Descriptio_test
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-01-29
        git sha              : $Format:%H$
        copyright            : (C) 2023 by imad
        email                : imad@gmailcom
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import *
from qgis.core import *
import xml.etree.ElementTree as ET


from PyQt5 import Qt, QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDir
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (QApplication, QFileSystemModel, QMainWindow,
                             QTreeView, QVBoxLayout, QWidget)
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'module_test_dialog_base.ui'))

tree = ET.parse("Définition des unités SABRE.xml")
root = tree.getroot()
class exampleClassDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(exampleClassDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.model = QFileSystemModel()
        self.model.setRootPath(QDir.rootPath())

        self.treeView.setModel(self.model)
        
        self.treeView.setRootIndex(self.model.index(QDir.currentPath()))
        self.treeView.setAnimated(False)
        self.treeView.setHeaderHidden(True)
        self.treeView.header().hideSection(1)
        self.treeView.header().hideSection(2)
        self.treeView.header().hideSection(3)
        self.treeView.clicked.connect(self.tree_event)
        self.tableView.clicked.connect(self.on_table_click)
        self.tableView.customContextMenuRequested.connect(self.table_right_click)
        
        self.tableView.setHorizontalScrollMode(Qt.QAbstractItemView.ScrollPerPixel)
        self.tableView.setVerticalScrollMode(Qt.QAbstractItemView.ScrollPerPixel)
        
        self.radioButton.toggled.connect(lambda:self.btnstate(self.radioButton))
        self.radioButton_2.toggled.connect(lambda:self.btnstate(self.radioButton_2))
        self.radioButton_3.toggled.connect(lambda:self.btnstate(self.radioButton_3))

        self.pushButton.clicked.connect(self.save)
        self.pushButton_8.clicked.connect(self.go_to_coordinate)

        self.table()
    def go_to_coordinate(self):
        canvas = iface.mapCanvas()
        x = self.lineEdit_6.text().split( "," )[ 0 ]

        y = self.lineEdit_6.text().split( "," )[ 1 ]


        print(x + "," + y)
        scale=50
        rect = QgsRectangle(float(x)-scale,float(y)-scale,float(x)+scale,float(y)+scale)
        canvas.setExtent(rect)
        pt = QgsPoint(float(x),float(y))
        canvas.refresh()

    def save(self):
        print([a for a in root.find("Unites").findall('Unit')][-1].get("id"))
        for unit in root.find("Unites"):
                if unit.get("id") == str(self.tableView.model().index(self.tableView.currentIndex().row(),13).data()):
                    print("11111")
                    unit.find("abr").text=self.lineEdit.text()
                    unit.find("arbic_abr").text=self.lineEdit_2.text()
                    print("33333")
                    unit.find("Nome").text=self.lineEdit_3.text()
                    unit.find("arbic_Nome").text=self.lineEdit_4.text()
                    unit.find("Region").text=self.comboBox.currentText()
                    unit.find("Secteur").text=self.comboBox_4.currentText()
                    unit.find("Arme").text=self.comboBox_2.currentText()
                    unit.find("Affiliation").text=self.comboBox_5.currentText()
                    unit.find("Echelon").text=self.comboBox_3.currentText()
                    unit.find("Position").text=self.lineEdit_6.text()
                    unit.find("Orientaion").text=self.lineEdit_5.text()
                    unit.find("Lieu").text=self.lineEdit_7.text()
                    unit.find("arbic_lieu").text=self.lineEdit_8.text()
        tree.write("Définition des unités SABRE.xml")
        self.table()
        # print("22222")
                    
    def btnstate(self, b):
        if b.text() == "English":
            if b.isChecked() == True:
                self.groupBox_2.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.groupBox_2.setTitle("Details")
                self.label_2.setText("Short name")
                self.label_4.setText("Full Name")
                self.label_6.setText("Military Region")
                self.label_10.setText("Sector")
                self.label_7.setText("Arm")
                self.label_11.setText("Affiliation")
                self.label_8.setText("Echelon")
                self.label_12.setText("Position (Lat/Long)")
                self.label_9.setText("Orientation")
                # self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
                self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
                self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)

        elif b.text() == "French":
            if b.isChecked() == True:
                self.groupBox_2.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.groupBox_2.setTitle("Détails")
                self.label_2.setText("Nom abrégé")
                self.label_4.setText("Nom Entier")
                self.label_6.setText("Région Militaire")
                self.label_10.setText("Secteur")
                self.label_7.setText("Arme")
                self.label_11.setText("Affiliation")
                self.label_8.setText("Echelon")
                self.label_12.setText("Position (Lat/Long)")
                self.label_9.setText("Orientation")
                # self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
                self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
                self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)

        elif b.text() == "العربية":
            if b.isChecked() == True:
                self.groupBox_2.setLayoutDirection(QtCore.Qt.RightToLeft)
                self.groupBox_2.setTitle("التفاصيل")
                self.label_2.setText("Nom abrégé")
                self.label_4.setText("Nom Entier")
                self.label_6.setText("الناحية العسكرية")
                self.label_10.setText("القطاع")
                self.label_7.setText("السلاح")
                self.label_11.setText("الانتماء")
                self.label_8.setText("إيكيلون")
                self.label_12.setText("الموقع (الارتفاع/البعد)")
                self.label_9.setText("التوجيه")
                # self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
                self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
                self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)

                
            
    def table_right_click(self, position):
        table = TableHandler(parent=self)
        table.right_click()
    @QtCore.pyqtSlot(QtCore.QModelIndex)
    def tree_event(self, index):

        indexItem = self.model.index(index.row(), 0, index.parent())

        fileName = self.model.fileName(indexItem)
        filePath = self.model.filePath(indexItem)
        if fileName == "Définition des unités SABRE.xml":
            self.stackedWidget.setCurrentIndex(0)
        elif fileName == "Définition des Armes.xml":
            self.stackedWidget.setCurrentIndex(1)
        print(fileName)
        print(filePath)

            
        
    def on_table_click(self):
        x=self.tableView.selectedIndexes()
        a=self.tableView.model().data(x[0])
        b=self.tableView.model().data(x[2])
        self.lineEdit.setText(self.tableView.model().data(x[0]))
        self.lineEdit_2.setText(self.tableView.model().data(x[1]))
        self.lineEdit_3.setText(self.tableView.model().data(x[2]))
        self.lineEdit_4.setText(self.tableView.model().data(x[3]))
        self.comboBox.setCurrentText(self.tableView.model().data(x[4]))
        self.comboBox_4.setCurrentText(self.tableView.model().data(x[5]))
        self.comboBox_2.setCurrentText(self.tableView.model().data(x[6]))
        self.comboBox_5.setCurrentText(self.tableView.model().data(x[7]))
        self.comboBox_3.setCurrentText(self.tableView.model().data(x[8]))
        self.lineEdit_6.setText(self.tableView.model().data(x[9]))
        self.lineEdit_5.setText(self.tableView.model().data(x[10]))
        self.lineEdit_7.setText(self.tableView.model().data(x[11]))
        self.lineEdit_8.setText(self.tableView.model().data(x[12]))
        # for h in x:
        #     print(self.tableView.model().data(h))
    def table(self):
        self.Columns = ('abr', 'arbic_abr' ,'Nome', 'arbic_Nome' ,'Region', 'Secteur', 'Arme', 
        'Affiliation', 'Echelon', 'Position', 'Orientaion', 'Lieu','arbic_lieu','id')
        self.Columnss = ('abr', 'إسم الوحدة' ,'Nome', 'الإسم الكامل للوحدة' ,'Region', 'Secteur', 'Arme', 
        'Affiliation', 'Echelon', 'Position', 'Orientaion', 'Lieu','الموقع','id')
        self.model_table= QtGui.QStandardItemModel(0, len(self.Columns))
        self.model_table.setHorizontalHeaderLabels(self.Columnss)
        self.tableView.setModel(self.model_table)
        # self.tableView.setColumnHidden(13,True)
        self.tableView.setColumnWidth(2,200)
        self.tableView.setColumnWidth(3,200)


        f = QtCore.QFile("Définition des unités SABRE.xml")
        if f.open(f.ReadOnly):
            print("77")
        else:
            print("999")
        
        cwd = os.getcwd()
        print(cwd)


        tree = ET.parse("Définition des unités SABRE.xml")
        root = tree.getroot()
        
        for unit in root.find("Unites"):
            if unit.get("deleted") == "0":
                currentLayer = {}
                id=unit.get("id")
                for h in iter(unit):
                    currentLayer[h.tag] = h.text
                currentLayer["id"] = id
                self.addLayer(currentLayer)
        print(root[0].findall("Unit")[-1].get('id'))

        # xml = QtCore.QXmlStreamReader(f)
        # valid = False
        # currentLayer = []
        # while not xml.atEnd():
        #     if xml.readNext() == xml.StartElement:
                
        #         # track the first start element and ensure that it's of
        #         # the right type, otherwise ignore the file
        #         if not valid:
        #             if xml.name() != 'Unites':
        #                 break
        #             valid = True
        #             continue
                
        #         if xml.name() == 'Unit':
        #             # and xml.attributes().value("deleted")=="0" 
                    
        #             # if a currentLayer exists, we assume it's finished,
        #             # so we can process it and add its items

        #             # if currentLayer:
        #             #     self.addLayer(currentLayer)
        #             #     print(len(currentLayer))
                        
        #             currentLayer = {}

        #         elif xml.name() in self.Columns:
        #             currentLayer[xml.name()] = xml.readElementText()
        #             if xml.name() == 'arbic_lieu':
        #                 self.addLayer(currentLayer)
                
                


        # f.close()

    def addLayer(self, layer):
        # create an empty "row" that can be filled with items in the correct
        # order, and that will leave empty cells if some fields do not exist
        row = [None] * len(self.Columns) 
        for field, value in layer.items():
            item = QtGui.QStandardItem()
            item.setData(value, QtCore.Qt.DisplayRole)
            item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            
            row[self.Columns.index(field)] = item
        self.model_table.appendRow(row)

class TableHandler:
    def __init__(self, parent=None):
        self.parent = parent

    def right_click(self):
        #bar = self.parent.menuBar()
        top_menu = QtWidgets.QMenu(self.parent)

        menu = top_menu.addMenu("Menu")
        add = menu.addAction("Add")
        delete = menu.addAction("Delete")
        # config = menu.addMenu("Configuration ...")

        # _load = config.addAction("&Load ...")
        # _save = config.addAction("&Save ...")

        # config.addSeparator()

        # config1 = config.addAction("Config1")
        # config2 = config.addAction("Config2")
        # config3 = config.addAction("Config3")

        action = menu.exec_(QtGui.QCursor.pos())
        
        
        if action == add:
            # do this
            
            data=root.find('Unites')
            unit = ET.SubElement(data,"Unit",id=str(int(root[0].findall("Unit")[-1].get('id'))+1),deleted="0")
            for element in self.parent.Columns[:13]:
                ET.SubElement(unit,element)

            
            
            
            tree.write("Définition des unités SABRE.xml")
            # tree = ET.parse("Définition des unités SABRE.xml")
            # root = tree.getroot()
            # for unit in root.find("Unites"):
            #     if unit.get("id") == "21":
            #         unit.find("abr").text=self.parent.lineEdit.text()
            # tree.write("Définition des unités SABRE.xml")


            self.parent.model_table.insertRows(self.parent.model_table.rowCount(), 1)
            print(self.parent.model_table.rowCount())
            self.parent.model_table.setData(self.parent.model_table.index(self.parent.model_table.rowCount()-1,13),[a for a in root.find("Unites").findall('Unit')][-1].get("id"))
            
            
            
        elif action == delete:
            # do this
            for unit in root.find("Unites"):
                if unit.get("id") == str(self.parent.tableView.model().index(self.parent.tableView.currentIndex().row(),13).data()):
                    unit.set("deleted","1")
                    break
            
            tree.write("Définition des unités SABRE.xml")
            self.parent.model_table.removeRow(self.parent.tableView.currentIndex().row())
